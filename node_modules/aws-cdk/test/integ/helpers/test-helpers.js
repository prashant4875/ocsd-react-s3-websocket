"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.integTest = void 0;
const fs = require("fs");
const path = require("path");
const corking_1 = require("./corking");
const SKIP_TESTS = fs.readFileSync(path.join(__dirname, 'skip-tests.txt'), { encoding: 'utf-8' }).split('\n');
/**
 * A wrapper for jest's 'test' which takes regression-disabled tests into account and prints a banner
 */
function integTest(name, callback, timeoutMillis) {
    // Integ tests can run concurrently, and are responsible for blocking
    // themselves if they cannot.  Because `test.concurrent` executes the test
    // code immediately, regardles of any `--testNamePattern`, this cannot be the
    // default: test filtering simply does not work with `test.concurrent`.
    // Instead, we make it opt-in only for the pipeline where we don't do any
    // selection, but execute all tests unconditionally.
    const testKind = process.env.JEST_TEST_CONCURRENT === 'true' ? test.concurrent : test;
    const runner = shouldSkip(name) ? testKind.skip : testKind;
    runner(name, async () => {
        // eslint-disable-next-line no-console
        console.log(`running test ${name} using ${runner.name}`);
        const output = new corking_1.MemoryStream();
        output.write('================================================================\n');
        output.write(`${name}\n`);
        output.write('================================================================\n');
        let success = true;
        try {
            return await callback({ output });
        }
        catch (e) {
            await output.flushTo(process.stderr);
            process.stderr.write(`❌ ${e.toString()}\n`);
            success = false;
            throw e;
        }
        finally {
            if (success) {
                // Show people there's progress
                process.stderr.write('✅');
            }
        }
    }, timeoutMillis);
}
exports.integTest = integTest;
function shouldSkip(testName) {
    return SKIP_TESTS.includes(testName);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC1oZWxwZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC1oZWxwZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHlCQUF5QjtBQUN6Qiw2QkFBNkI7QUFDN0IsdUNBQXlDO0FBRXpDLE1BQU0sVUFBVSxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsZ0JBQWdCLENBQUMsRUFBRSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUk5Rzs7R0FFRztBQUNILFNBQWdCLFNBQVMsQ0FDdkIsSUFBWSxFQUNaLFFBQWlELEVBQ2pELGFBQXNCO0lBR3RCLHFFQUFxRTtJQUNyRSwwRUFBMEU7SUFDMUUsNkVBQTZFO0lBQzdFLHVFQUF1RTtJQUN2RSx5RUFBeUU7SUFDekUsb0RBQW9EO0lBQ3BELE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDdEYsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7SUFFM0QsTUFBTSxDQUFDLElBQUksRUFBRSxLQUFLLElBQUksRUFBRTtRQUN0QixzQ0FBc0M7UUFDdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsSUFBSSxVQUFVLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ3pELE1BQU0sTUFBTSxHQUFHLElBQUksc0JBQVksRUFBRSxDQUFDO1FBRWxDLE1BQU0sQ0FBQyxLQUFLLENBQUMsb0VBQW9FLENBQUMsQ0FBQztRQUNuRixNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQztRQUMxQixNQUFNLENBQUMsS0FBSyxDQUFDLG9FQUFvRSxDQUFDLENBQUM7UUFFbkYsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ25CLElBQUk7WUFDRixPQUFPLE1BQU0sUUFBUSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztTQUNuQztRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsTUFBTSxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNyQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDNUMsT0FBTyxHQUFHLEtBQUssQ0FBQztZQUNoQixNQUFNLENBQUMsQ0FBQztTQUNUO2dCQUFTO1lBQ1IsSUFBSSxPQUFPLEVBQUU7Z0JBQ1gsK0JBQStCO2dCQUMvQixPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUMzQjtTQUNGO0lBQ0gsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0FBQ3BCLENBQUM7QUF2Q0QsOEJBdUNDO0FBRUQsU0FBUyxVQUFVLENBQUMsUUFBZ0I7SUFDbEMsT0FBTyxVQUFVLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3ZDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgTWVtb3J5U3RyZWFtIH0gZnJvbSAnLi9jb3JraW5nJztcblxuY29uc3QgU0tJUF9URVNUUyA9IGZzLnJlYWRGaWxlU3luYyhwYXRoLmpvaW4oX19kaXJuYW1lLCAnc2tpcC10ZXN0cy50eHQnKSwgeyBlbmNvZGluZzogJ3V0Zi04JyB9KS5zcGxpdCgnXFxuJyk7XG5cbmV4cG9ydCB0eXBlIFRlc3RDb250ZXh0ID0geyByZWFkb25seSBvdXRwdXQ6IE5vZGVKUy5Xcml0YWJsZVN0cmVhbTsgfTtcblxuLyoqXG4gKiBBIHdyYXBwZXIgZm9yIGplc3QncyAndGVzdCcgd2hpY2ggdGFrZXMgcmVncmVzc2lvbi1kaXNhYmxlZCB0ZXN0cyBpbnRvIGFjY291bnQgYW5kIHByaW50cyBhIGJhbm5lclxuICovXG5leHBvcnQgZnVuY3Rpb24gaW50ZWdUZXN0KFxuICBuYW1lOiBzdHJpbmcsXG4gIGNhbGxiYWNrOiAoY29udGV4dDogVGVzdENvbnRleHQpID0+IFByb21pc2U8dm9pZD4sXG4gIHRpbWVvdXRNaWxsaXM/OiBudW1iZXIsXG4pIHtcblxuICAvLyBJbnRlZyB0ZXN0cyBjYW4gcnVuIGNvbmN1cnJlbnRseSwgYW5kIGFyZSByZXNwb25zaWJsZSBmb3IgYmxvY2tpbmdcbiAgLy8gdGhlbXNlbHZlcyBpZiB0aGV5IGNhbm5vdC4gIEJlY2F1c2UgYHRlc3QuY29uY3VycmVudGAgZXhlY3V0ZXMgdGhlIHRlc3RcbiAgLy8gY29kZSBpbW1lZGlhdGVseSwgcmVnYXJkbGVzIG9mIGFueSBgLS10ZXN0TmFtZVBhdHRlcm5gLCB0aGlzIGNhbm5vdCBiZSB0aGVcbiAgLy8gZGVmYXVsdDogdGVzdCBmaWx0ZXJpbmcgc2ltcGx5IGRvZXMgbm90IHdvcmsgd2l0aCBgdGVzdC5jb25jdXJyZW50YC5cbiAgLy8gSW5zdGVhZCwgd2UgbWFrZSBpdCBvcHQtaW4gb25seSBmb3IgdGhlIHBpcGVsaW5lIHdoZXJlIHdlIGRvbid0IGRvIGFueVxuICAvLyBzZWxlY3Rpb24sIGJ1dCBleGVjdXRlIGFsbCB0ZXN0cyB1bmNvbmRpdGlvbmFsbHkuXG4gIGNvbnN0IHRlc3RLaW5kID0gcHJvY2Vzcy5lbnYuSkVTVF9URVNUX0NPTkNVUlJFTlQgPT09ICd0cnVlJyA/IHRlc3QuY29uY3VycmVudCA6IHRlc3Q7XG4gIGNvbnN0IHJ1bm5lciA9IHNob3VsZFNraXAobmFtZSkgPyB0ZXN0S2luZC5za2lwIDogdGVzdEtpbmQ7XG5cbiAgcnVubmVyKG5hbWUsIGFzeW5jICgpID0+IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUubG9nKGBydW5uaW5nIHRlc3QgJHtuYW1lfSB1c2luZyAke3J1bm5lci5uYW1lfWApO1xuICAgIGNvbnN0IG91dHB1dCA9IG5ldyBNZW1vcnlTdHJlYW0oKTtcblxuICAgIG91dHB1dC53cml0ZSgnPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxcbicpO1xuICAgIG91dHB1dC53cml0ZShgJHtuYW1lfVxcbmApO1xuICAgIG91dHB1dC53cml0ZSgnPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxcbicpO1xuXG4gICAgbGV0IHN1Y2Nlc3MgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgY2FsbGJhY2soeyBvdXRwdXQgfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgYXdhaXQgb3V0cHV0LmZsdXNoVG8ocHJvY2Vzcy5zdGRlcnIpO1xuICAgICAgcHJvY2Vzcy5zdGRlcnIud3JpdGUoYOKdjCAke2UudG9TdHJpbmcoKX1cXG5gKTtcbiAgICAgIHN1Y2Nlc3MgPSBmYWxzZTtcbiAgICAgIHRocm93IGU7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChzdWNjZXNzKSB7XG4gICAgICAgIC8vIFNob3cgcGVvcGxlIHRoZXJlJ3MgcHJvZ3Jlc3NcbiAgICAgICAgcHJvY2Vzcy5zdGRlcnIud3JpdGUoJ+KchScpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgdGltZW91dE1pbGxpcyk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFNraXAodGVzdE5hbWU6IHN0cmluZykge1xuICByZXR1cm4gU0tJUF9URVNUUy5pbmNsdWRlcyh0ZXN0TmFtZSk7XG59XG4iXX0=